#!/bin/bash

# Script c√†i ƒë·∫∑t dependencies cho d·ª± √°n Children Care Frontend
# H·ªó tr·ª£ c·∫£ npm v√† yarn

set -e  # D·ª´ng script n·∫øu c√≥ l·ªói

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function ƒë·ªÉ in m√†u
print_color() {
    printf "${1}${2}${NC}\n"
}

print_color $BLUE "==================================="
print_color $BLUE "Children Care Frontend - Setup Script"
print_color $BLUE "==================================="

# Ki·ªÉm tra Node.js
if ! command -v node &> /dev/null; then
    print_color $RED "‚ùå Node.js ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
    print_color $YELLOW "Vui l√≤ng c√†i ƒë·∫∑t Node.js t·ª´: https://nodejs.org/"
    exit 1
fi

NODE_VERSION=$(node --version)
print_color $GREEN "‚úÖ Node.js version: $NODE_VERSION"

# Ki·ªÉm tra npm
if ! command -v npm &> /dev/null; then
    print_color $RED "‚ùå npm ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
    exit 1
fi

NPM_VERSION=$(npm --version)
print_color $GREEN "‚úÖ npm version: $NPM_VERSION"

# Ki·ªÉm tra yarn (t√πy ch·ªçn)
if command -v yarn &> /dev/null; then
    YARN_VERSION=$(yarn --version)
    print_color $GREEN "‚úÖ yarn version: $YARN_VERSION"
    YARN_AVAILABLE=true
else
    print_color $YELLOW "‚ö†Ô∏è  yarn ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t (t√πy ch·ªçn)"
    YARN_AVAILABLE=false
fi

echo ""

# Ch·ªçn package manager
if [ "$YARN_AVAILABLE" = true ]; then
    print_color $BLUE "Ch·ªçn package manager:"
    print_color $YELLOW "1) npm (m·∫∑c ƒë·ªãnh)"
    print_color $YELLOW "2) yarn"
    
    read -p "Nh·∫≠p l·ª±a ch·ªçn (1-2) [1]: " choice
    choice=${choice:-1}
    
    if [ "$choice" = "2" ]; then
        PACKAGE_MANAGER="yarn"
        INSTALL_CMD="yarn install"
    else
        PACKAGE_MANAGER="npm"
        INSTALL_CMD="npm install"
    fi
else
    PACKAGE_MANAGER="npm"
    INSTALL_CMD="npm install"
fi

print_color $GREEN "üì¶ S·ª≠ d·ª•ng package manager: $PACKAGE_MANAGER"

echo ""

# Ki·ªÉm tra file package.json
if [ ! -f "package.json" ]; then
    print_color $RED "‚ùå Kh√¥ng t√¨m th·∫•y file package.json!"
    print_color $YELLOW "Vui l√≤ng ch·∫°y script n√†y t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n"
    exit 1
fi

print_color $GREEN "‚úÖ T√¨m th·∫•y file package.json"

# X√≥a node_modules v√† package-lock.json/yarn.lock c≈© (n·∫øu c√≥)
print_color $BLUE "üßπ D·ªçn d·∫πp c√°c file c≈©..."

if [ -d "node_modules" ]; then
    print_color $YELLOW "X√≥a th∆∞ m·ª•c node_modules c≈©..."
    rm -rf node_modules
fi

if [ "$PACKAGE_MANAGER" = "npm" ] && [ -f "yarn.lock" ]; then
    print_color $YELLOW "X√≥a yarn.lock (s·ª≠ d·ª•ng npm)..."
    rm -f yarn.lock
elif [ "$PACKAGE_MANAGER" = "yarn" ] && [ -f "package-lock.json" ]; then
    print_color $YELLOW "X√≥a package-lock.json (s·ª≠ d·ª•ng yarn)..."
    rm -f package-lock.json
fi

# C√†i ƒë·∫∑t dependencies
print_color $BLUE "üì¶ C√†i ƒë·∫∑t dependencies..."
print_color $YELLOW "Ch·∫°y l·ªánh: $INSTALL_CMD"

echo ""

if eval "$INSTALL_CMD"; then
    print_color $GREEN "‚úÖ C√†i ƒë·∫∑t dependencies th√†nh c√¥ng!"
else
    print_color $RED "‚ùå L·ªói khi c√†i ƒë·∫∑t dependencies!"
    exit 1
fi

echo ""

# Ki·ªÉm tra c√°c dependency quan tr·ªçng
print_color $BLUE "üîç Ki·ªÉm tra c√°c dependency quan tr·ªçng..."

IMPORTANT_DEPS=("next" "react" "react-dom" "typescript" "tailwindcss")

for dep in "${IMPORTANT_DEPS[@]}"; do
    if [ "$PACKAGE_MANAGER" = "npm" ]; then
        if npm list "$dep" &> /dev/null; then
            print_color $GREEN "‚úÖ $dep"
        else
            print_color $RED "‚ùå $dep kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        fi
    else
        if yarn list --pattern "$dep" &> /dev/null; then
            print_color $GREEN "‚úÖ $dep"
        else
            print_color $RED "‚ùå $dep kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        fi
    fi
done

echo ""

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c script c√≥ s·∫µn
print_color $BLUE "üìã C√°c l·ªánh c√≥ s·∫µn:"
print_color $YELLOW "  ‚Ä¢ $PACKAGE_MANAGER run dev    - Ch·∫°y development server"
print_color $YELLOW "  ‚Ä¢ $PACKAGE_MANAGER run build  - Build production"
print_color $YELLOW "  ‚Ä¢ $PACKAGE_MANAGER run start  - Ch·∫°y production server"
print_color $YELLOW "  ‚Ä¢ $PACKAGE_MANAGER run lint   - Ki·ªÉm tra code style"

echo ""

# H∆∞·ªõng d·∫´n ti·∫øp theo
print_color $GREEN "üéâ C√†i ƒë·∫∑t ho√†n t·∫•t!"
print_color $BLUE "B∆∞·ªõc ti·∫øp theo:"
print_color $YELLOW "1. Ch·∫°y: $PACKAGE_MANAGER run dev"
print_color $YELLOW "2. M·ªü tr√¨nh duy·ªát t·∫°i: http://localhost:3000"

echo ""
print_color $BLUE "==================================="
print_color $BLUE "Happy coding! üöÄ"
print_color $BLUE "===================================" 