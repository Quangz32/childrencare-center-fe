'use client';

import { useState } from 'react';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { useEffect } from 'react';

type Message = {
  role: 'user' | 'assistant';
  content: string;
};

const Chatbot = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      role: 'assistant',
      content:
        'Xin ch√†o! T√¥i l√† T∆∞ v·∫•n vi√™n √Ånh D∆∞∆°ng üåà. T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªÅ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn tr·∫ª t·ª± k·ª∑, ch·∫≠m ph√°t tri·ªÉn. B·∫°n c·∫ßn t∆∞ v·∫•n g√¨, h√£y nh·∫Øn cho t√¥i nh√©!'
    }
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isOpen, setIsOpen] = useState(true);

  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY || '';
  const genAI = new GoogleGenerativeAI(apiKey);

  // Prompt ƒë·ªãnh h∆∞·ªõng chuy√™n m√¥n
  const systemPrompt =
    'B·∫°n l√† m·ªôt t∆∞ v·∫•n vi√™n chuy√™n nghi·ªáp c·ªßa Trung t√¢m √Ånh D∆∞∆°ng, chuy√™n h·ªó tr·ª£ ph·ª• huynh v·ªÅ tr·∫ª t·ª± k·ª∑, ch·∫≠m ph√°t tri·ªÉn. H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, th√¢n thi·ªán v√† ƒë√∫ng chuy√™n m√¥n.';

  const handleSendMessage = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage: Message = { role: 'user', content: input };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    setError(null);

    try {
      const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

      // G·ª≠i prompt ƒë·ªãnh h∆∞·ªõng + c√¢u h·ªèi ng∆∞·ªùi d√πng
      const result = await model.generateContent(systemPrompt + '\nC√¢u h·ªèi: ' + input);
      const response = await result.response;
      const text = response.text();

      const assistantMessage: Message = { role: 'assistant', content: text };
      setMessages(prev => [...prev, assistantMessage]);
    } catch (err) {
      console.error('Gemini API error:', err);
      let errorMessage = 'ƒê√£ x·∫£y ra l·ªói khi g·ªçi Gemini API.';
      
      if (err instanceof Error) {
        if (err.message.includes('API key')) {
          errorMessage = 'L·ªói API key. Vui l√≤ng ki·ªÉm tra l·∫°i API key c·ªßa b·∫°n.';
        } else if (err.message.includes('404')) {
          errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gemini API. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
      }
      
      setError(errorMessage);
      const errorResponse: Message = { role: 'assistant', content: errorMessage };
      setMessages(prev => [...prev, errorResponse]);
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="flex flex-col h-[600px] w-[400px] bg-white rounded-3xl border-2 border-black shadow-2xl overflow-hidden">
      <div className="p-4 bg-blue-theme bg-blue-600 text-white rounded-t-3xl flex items-center gap-3 justify-between border-b-2 border-black relative">
        <div className="flex items-center gap-3">
          <img src="/images/avatar.png" alt="avatar" className="w-14 h-14 rounded-full border-4 border-yellow-theme border-yellow-300 shadow-md bg-white" />
          <div>
            <h2 className="text-xl font-bold">T∆∞ v·∫•n vi√™n √Ånh D∆∞∆°ng</h2>
            <p className="text-xs text-yellow-theme text-yellow-400 font-semibold">Chuy√™n gia h·ªó tr·ª£ tr·∫ª t·ª± k·ª∑, ch·∫≠m ph√°t tri·ªÉn</p>
          </div>
        </div>
        <button 
          onClick={() => setIsOpen(false)}
          className="text-white hover:text-yellow-theme hover:text-yellow-400 focus:outline-none absolute right-4 top-4"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-theme bg-gray-100">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'} items-end`}
          >
            {message.role === 'assistant' && (
              <img src="/images/avatar.png" alt="avatar" className="w-8 h-8 rounded-full border-2 border-yellow-theme border-yellow-300 mr-2 bg-white" />
            )}
            <div
              className={`max-w-[80%] p-3 rounded-2xl border-2 font-medium shadow-md ${
                message.role === 'user'
                  ? 'bg-blue-theme bg-blue-600 text-white border-black rounded-br-md'
                  : 'bg-white text-gray-900 border-yellow-theme border-yellow-300 rounded-bl-md'
              }`}
            >
              {message.content}
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="flex items-end justify-start">
            <img src="/images/avatar.png" alt="avatar" className="w-8 h-8 rounded-full border-2 border-yellow-theme border-yellow-300 mr-2 bg-white" />
            <div className="bg-white text-gray-900 border-2 border-yellow-theme border-yellow-300 rounded-2xl rounded-bl-md p-3 font-medium shadow-md flex items-center min-w-[60px]">
              <span className="dot-flashing"></span>
            </div>
          </div>
        )}
        {error && <div className="text-red-500 text-sm mt-2">{error}</div>}
      </div>

      <div className="p-4 border-t-2 border-black bg-white">
        <div className="flex space-x-2">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
            placeholder="Nh·∫≠p tin nh·∫Øn..."
            className="flex-1 p-3 border-2 border-black rounded-full focus:outline-none focus:ring-2 focus:ring-blue-theme focus:ring-blue-600 text-black bg-gray-theme bg-gray-100 shadow-sm"
          />
          <button
            onClick={handleSendMessage}
            disabled={isLoading}
            className="px-6 py-2 bg-blue-theme bg-blue-600 text-white rounded-full border-2 border-black font-semibold shadow-md hover:bg-yellow-theme hover:bg-yellow-400 hover:text-blue-theme hover:text-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-theme focus:ring-blue-600 disabled:opacity-50 transition-all"
          >
            G·ª≠i
          </button>
        </div>
      </div>
      {/* Hi·ªáu ·ª©ng ba ch·∫•m ƒë·ªông */}
      <style>{`
        .dot-flashing {
          position: relative;
          width: 1.5em;
          height: 0.5em;
          display: flex;
          align-items: center;
          justify-content: flex-start;
        }
        .dot-flashing:before, .dot-flashing:after, .dot-flashing span {
          content: '';
          display: inline-block;
          width: 0.5em;
          height: 0.5em;
          margin-right: 0.2em;
          background: #FFD600;
          border-radius: 50%;
          animation: dotFlashing 1s infinite linear alternate;
        }
        .dot-flashing:after {
          animation-delay: 0.5s;
        }
        .dot-flashing span {
          animation-delay: 0.25s;
        }
        @keyframes dotFlashing {
          0% { opacity: 0.2; }
          50%, 100% { opacity: 1; }
        }
      `}</style>
    </div>
  );
};

export default Chatbot;
